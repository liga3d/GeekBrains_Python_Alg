#1. Написать программу, которая будет складывать, вычитать, умножать или делить два числа. 
#Числа и знак операции вводятся пользователем. После выполнения вычисления программа не должна завершаться, 
#а должна запрашивать новые данные для вычислений. 
#Завершение программы должно выполняться при вводе символа '0' в качестве знака операции. 
#Если пользователь вводит неверный знак (не '0', '+', '-', '*', '/'), 
#то программа должна сообщать ему об ошибке и снова запрашивать знак операции. 
#Также сообщать пользователю о невозможности деления на ноль, если он ввел 0 в качестве делителя.

#без ввода с клавиатуры

data = ('23 + 56', '5213 * 523', '5213 / 4231', '4231 - 23')

def my_sum(a, b):
	return a + b

def my_sub(a, b):
	return a - b

def my_mult(a, b):
	return a * b

def my_div(a, b):
	if b != 0:
		return a / b
	else:
		print('Error data input. Division by zero')
		raise SystemExit

funcs = {
	'+' : my_sum,
	'-' : my_sub,
	'*' : my_mult,
	'/' : my_div
}

res = ''
for items in data:
	item = items.split()
	ans = funcs[item[1]](int(item[0]), int(item[2]))
	res += str(ans) + '\n'
print(res)

#2. Посчитать четные и нечетные цифры введенного натурального числа. 
#Например, если введено число 34560, то у него 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).

num = input('Enter number: ')
odd = 0
for n in num:
	if int(n) in (1, 3, 5, 7, 9):
		odd += 1
print('Четных - {}, нечетных - {}'.format(len(num) - odd, odd))

#3. Сформировать из введенного числа обратное по порядку входящих в него цифр и вывести на экран. 
#Например, если введено число 3486, то надо вывести число 6843.

num = input('Enter number: ')
print(num[::-1])

#4. Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...
#Количество элементов (n) вводится с клавиатуры.

n = int(input('Enter number: '))
sum = 0
for i in range(0, n):
	sum += (-1 / 2) ** i 
print(sum)

#5. Вывести на экран коды и символы таблицы ASCII, начиная с символа под номером 32 и заканчивая 127-м включительно. 
#Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке.

res = ''
for i in range(32, 128):
	s = i - 32
	if s % 10 == 0: res += '\n'
	res += str(i) + '-' + chr(i) + ' '
print(res)

#6. В программе генерируется случайное целое число от 0 до 100. Пользователь должен его отгадать 
#не более чем за 10 попыток. 
#После каждой неудачной попытки должно сообщаться больше или меньше введенное пользователем число, 
#чем то, что загадано. Если за 10 попыток число не отгадано, то вывести загаданное число.

import random

num = random.randint(1,100)
count = 10
while True:
	if count > 0:
		print('Есть еще {} попыток'.format(count))
		s = int(input('Ваше предположение: '))
		if s == num:
			print('Да, {} - это верное число!'.format(s))
			break
		elif s > num:
			print('Загаданное число меньше!')
		elif s < num:
			print('Загаданное число больше!')
		count -= 1
	else:
		print('Количество попыток изчерпано, Вы проиграли!')
		break

#7. Напишите программу, доказывающую или проверяющую, что для множества натуральных чисел выполняется 
#равенство: 1+2+...+n = n(n+1)/2, где n - любое натуральное число.

n = int(input('Enter number: '))
s_l = sum(range(1, n + 1))
s_r = (n * (n + 1)) / 2
print('1 + 2 + ... + n = {}\nn * (n + 1) / 2 = {}'.format(s_l, s_r))

#8. Посчитать, сколько раз встречается определенная цифра в введенной последовательности чисел. 
#Количество вводимых чисел и цифра, которую необходимо посчитать, задаются вводом с клавиатуры.

#вместо ввода с клавиатуры будет дата
data = '123 323 432523 4234 18965 09723 8093 456 90823 78234 7902 50934 7023'
digit = 3
count = 0

for num in data:
	if num.isdigit():
		if int(num) == digit:
			count += 1
print(count)

#9. Среди натуральных чисел, которые были введены, найти наибольшее по сумме цифр. 
#Вывести на экран это число и сумму его цифр.

#вместо ввода с клавиатуры будет дата
data = '123 323 432523 4234 18965 09723 8093 456 90823 78234 7902 50934 7023'

digit = 0
max_sum = 0
for num in data.split():
	my_sum = 0
	for s in num:
		my_sum += int(s)
	if max_sum < my_sum:
		max_sum = my_sum
		digit = num
print(digit, max_sum)
